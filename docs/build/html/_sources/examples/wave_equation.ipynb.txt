{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sympy import init_printing; init_printing()\n",
    "\n",
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"all\" # display all expression in one cell instead of the last one"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Wave Equation\n",
    "The tensor coefficient matrix in electromagnetic wave equation \n",
    "\n",
    "$$\\mathit{k}\\times(\\mathit{k}\\times \\tilde{\\mathit{E}}) + k_0^2 \\mathbf{\\kappa}\\cdot \\tilde{\\mathit{E}}=\\mathit{0}$$\n",
    "\n",
    "$$\n",
    "\\left(\\begin{bmatrix}\n",
    "-k_z^2 &  & k_x k_z \\\\ \n",
    " & -k_x^2-k_z^2 & \\\\ \n",
    " k_x k_z &  & -k_x^2\n",
    "\\end{bmatrix} + k_0^2\n",
    "\\begin{bmatrix}\n",
    "\\kappa_\\perp & -j \\kappa_\\times & \\\\ \n",
    "j\\kappa_\\times & \\kappa_\\perp  & \\\\ \n",
    " &  & \\kappa_\\parallel\n",
    "\\end{bmatrix}\\right)\\cdot \n",
    "\\begin{bmatrix}\n",
    "\\tilde{E}_x\\\\ \n",
    "\\tilde{E}_y\\\\ \n",
    "\\tilde{E}_z\n",
    "\\end{bmatrix} = \n",
    "\\begin{bmatrix}\n",
    "0\\\\ \n",
    "0\\\\ \n",
    "0\n",
    "\\end{bmatrix}$$\n",
    "\n",
    "$$\n",
    "\\mathbf{T}\\cdot \n",
    "\\begin{bmatrix}\n",
    "\\tilde{E}_x\\\\ \n",
    "\\tilde{E}_y\\\\ \n",
    "\\tilde{E}_z\n",
    "\\end{bmatrix} = \n",
    "\\begin{bmatrix}\n",
    "0\\\\ \n",
    "0\\\\ \n",
    "0\n",
    "\\end{bmatrix}\n",
    "$$\n",
    "\n",
    "You can acquire the `sympy.Array` representation of the above (tensor) matrix coefficients by the `WaveEq` class' coeff_matrix() method. For the relevant variable, you can get them by attribute *e.g.*, `wave_eq.wave.k[1]` means the wave's $k_y$ component of $\\vec{k}$ vector."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\left[\\begin{matrix}- k_{y }^{2} - k_{z }^{2} + \\frac{\\kappa_{\\perp} \\omega_{}^{2}}{c^{2}} & - \\frac{i \\kappa_{\\times} \\omega_{}^{2}}{c^{2}} + k_{x } k_{y } & k_{x } k_{z }\\\\\\frac{i \\kappa_{\\times} \\omega_{}^{2}}{c^{2}} + k_{x } k_{y } & - k_{x }^{2} - k_{z }^{2} + \\frac{\\kappa_{\\perp} \\omega_{}^{2}}{c^{2}} & k_{y } k_{z }\\\\k_{x } k_{z } & k_{y } k_{z } & - k_{x }^{2} - k_{y }^{2} + \\frac{\\kappa_{\\parallel} \\omega_{}^{2}}{c^{2}}\\end{matrix}\\right]$"
      ],
      "text/plain": [
       "⎡                            2                         2                      \n",
       "⎢       2       2   κ_\\perp⋅ω       ⅈ⋅\\kappa_{\\times}⋅ω                       \n",
       "⎢ - k_y_  - k_z_  + ──────────    - ──────────────────── + kₓ ⋅k_y_           \n",
       "⎢                        2                    2                               \n",
       "⎢                       c                    c                                \n",
       "⎢                                                                             \n",
       "⎢                   2                                          2              \n",
       "⎢ⅈ⋅\\kappa_{\\times}⋅ω                      2       2   κ_\\perp⋅ω               \n",
       "⎢──────────────────── + kₓ ⋅k_y_     - kₓ   - k_z_  + ──────────              \n",
       "⎢          2                                               2                  \n",
       "⎢         c                                               c                   \n",
       "⎢                                                                             \n",
       "⎢                                                                             \n",
       "⎢                                                                         2   \n",
       "⎢           kₓ ⋅k_z_                          k_y_⋅k_z_              - kₓ   - \n",
       "⎢                                                                             \n",
       "⎣                                                                             \n",
       "\n",
       "                      ⎤\n",
       "                      ⎥\n",
       "  kₓ ⋅k_z_            ⎥\n",
       "                      ⎥\n",
       "                      ⎥\n",
       "                      ⎥\n",
       "                      ⎥\n",
       "                      ⎥\n",
       "  k_y_⋅k_z_           ⎥\n",
       "                      ⎥\n",
       "                      ⎥\n",
       "                      ⎥\n",
       "                     2⎥\n",
       "    2   κ_\\parallel⋅ω ⎥\n",
       "k_y_  + ──────────────⎥\n",
       "               2      ⎥\n",
       "              c       ⎦"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/latex": [
       "$\\displaystyle \\left[\\begin{matrix}k_{y } \\left(- E_{x } k_{y } + E_{y } k_{x }\\right) - k_{z } \\left(E_{x } k_{z } - E_{z } k_{x }\\right) & - k_{x } \\left(- E_{x } k_{y } + E_{y } k_{x }\\right) + k_{z } \\left(- E_{y } k_{z } + E_{z } k_{y }\\right) & k_{x } \\left(E_{x } k_{z } - E_{z } k_{x }\\right) - k_{y } \\left(- E_{y } k_{z } + E_{z } k_{y }\\right)\\end{matrix}\\right] = \\left[\\begin{matrix}- \\frac{\\omega_{}^{2} \\left(E_{x } \\kappa_{\\perp} - i E_{y } \\kappa_{\\times}\\right)}{c^{2}} & - \\frac{\\omega_{}^{2} \\left(i E_{x } \\kappa_{\\times} + E_{y } \\kappa_{\\perp}\\right)}{c^{2}} & - \\frac{E_{z } \\kappa_{\\parallel} \\omega_{}^{2}}{c^{2}}\\end{matrix}\\right]$"
      ],
      "text/plain": [
       "                                                                              \n",
       "                                                                              \n",
       "[k_y_⋅(-Eₓ ⋅k_y_ + E_y_⋅kₓ ) - k_z_⋅(Eₓ ⋅k_z_ - E_z_⋅kₓ )  -kₓ ⋅(-Eₓ ⋅k_y_ + E\n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "                                                                              \n",
       "                                                                              \n",
       "_y_⋅kₓ ) + k_z_⋅(-E_y_⋅k_z_ + E_z_⋅k_y_)  kₓ ⋅(Eₓ ⋅k_z_ - E_z_⋅kₓ ) - k_y_⋅(-E\n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "                         ⎡  2                                            2    \n",
       "                         ⎢-ω ⋅(Eₓ ⋅κ_\\perp - ⅈ⋅E_y_⋅\\kappa_{\\times})   -ω ⋅(ⅈ⋅\n",
       "_y_⋅k_z_ + E_z_⋅k_y_)] = ⎢───────────────────────────────────────────  ───────\n",
       "                         ⎢                      2                             \n",
       "                         ⎣                     c                              \n",
       "\n",
       "                                                         2 ⎤\n",
       "Eₓ ⋅\\kappa_{\\times} + E_y_⋅κ_\\perp)   -E_z_⋅κ_\\parallel⋅ω  ⎥\n",
       "────────────────────────────────────  ─────────────────────⎥\n",
       "               2                                 2         ⎥\n",
       "              c                                 c          ⎦"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sinupy import mediums, waves\n",
    "from sinupy.waves import EM\n",
    "plasma = mediums.ColdMagnetizedPlasma()\n",
    "wave_eq = waves.EM.WaveEq(plasma)\n",
    "wave = wave_eq.wave\n",
    "wave_eq.coeff_matrix()\n",
    "wave_eq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The function `sinupy.waves.EM.solve_N2(WaveEq)` returns the solutions of $N^2(\\omega, \\theta)$, which is usually tedious for hand-deduction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/latex": [
       "$\\displaystyle \\left[ \\frac{- \\kappa_{\\times}^{2} \\sin^{2}{\\left(\\theta \\right)} - \\kappa_{\\parallel} \\kappa_{\\perp} \\sin^{2}{\\left(\\theta \\right)} + 2 \\kappa_{\\parallel} \\kappa_{\\perp} + \\kappa_{\\perp}^{2} \\sin^{2}{\\left(\\theta \\right)} + \\sqrt{\\kappa_{\\times}^{4} \\sin^{4}{\\left(\\theta \\right)} - 4 \\kappa_{\\times}^{2} \\kappa_{\\parallel}^{2} \\sin^{2}{\\left(\\theta \\right)} + 4 \\kappa_{\\times}^{2} \\kappa_{\\parallel}^{2} + 2 \\kappa_{\\times}^{2} \\kappa_{\\parallel} \\kappa_{\\perp} \\sin^{4}{\\left(\\theta \\right)} - 2 \\kappa_{\\times}^{2} \\kappa_{\\perp}^{2} \\sin^{4}{\\left(\\theta \\right)} + \\kappa_{\\parallel}^{2} \\kappa_{\\perp}^{2} \\sin^{4}{\\left(\\theta \\right)} - 2 \\kappa_{\\parallel} \\kappa_{\\perp}^{3} \\sin^{4}{\\left(\\theta \\right)} + \\kappa_{\\perp}^{4} \\sin^{4}{\\left(\\theta \\right)}}}{2 \\left(- \\kappa_{\\parallel} \\sin^{2}{\\left(\\theta \\right)} + \\kappa_{\\parallel} + \\kappa_{\\perp} \\sin^{2}{\\left(\\theta \\right)}\\right)}, \\  \\frac{\\kappa_{\\times}^{2} \\sin^{2}{\\left(\\theta \\right)} + \\kappa_{\\parallel} \\kappa_{\\perp} \\sin^{2}{\\left(\\theta \\right)} - 2 \\kappa_{\\parallel} \\kappa_{\\perp} - \\kappa_{\\perp}^{2} \\sin^{2}{\\left(\\theta \\right)} + \\sqrt{\\kappa_{\\times}^{4} \\sin^{4}{\\left(\\theta \\right)} - 4 \\kappa_{\\times}^{2} \\kappa_{\\parallel}^{2} \\sin^{2}{\\left(\\theta \\right)} + 4 \\kappa_{\\times}^{2} \\kappa_{\\parallel}^{2} + 2 \\kappa_{\\times}^{2} \\kappa_{\\parallel} \\kappa_{\\perp} \\sin^{4}{\\left(\\theta \\right)} - 2 \\kappa_{\\times}^{2} \\kappa_{\\perp}^{2} \\sin^{4}{\\left(\\theta \\right)} + \\kappa_{\\parallel}^{2} \\kappa_{\\perp}^{2} \\sin^{4}{\\left(\\theta \\right)} - 2 \\kappa_{\\parallel} \\kappa_{\\perp}^{3} \\sin^{4}{\\left(\\theta \\right)} + \\kappa_{\\perp}^{4} \\sin^{4}{\\left(\\theta \\right)}}}{2 \\left(\\kappa_{\\parallel} \\sin^{2}{\\left(\\theta \\right)} - \\kappa_{\\parallel} - \\kappa_{\\perp} \\sin^{2}{\\left(\\theta \\right)}\\right)}\\right]$"
      ],
      "text/plain": [
       "⎡                                                                             \n",
       "⎢                 2    2                             2                        \n",
       "⎢- \\kappa_{\\times} ⋅sin (θ) - κ_\\parallel⋅κ_\\perp⋅sin (θ) + 2⋅κ_\\parallel⋅κ_\\p\n",
       "⎢─────────────────────────────────────────────────────────────────────────────\n",
       "⎢                                                                             \n",
       "⎣                                                                             \n",
       "\n",
       "                            __________________________________________________\n",
       "             2    2        ╱                4    4                       2    \n",
       "erp + κ_\\perp ⋅sin (θ) + ╲╱  \\kappa_{\\times} ⋅sin (θ) - 4⋅\\kappa_{\\times} ⋅κ_\\\n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "______________________________________________________________________________\n",
       "        2    2                       2            2                    2      \n",
       "parallel ⋅sin (θ) + 4⋅\\kappa_{\\times} ⋅κ_\\parallel  + 2⋅\\kappa_{\\times} ⋅κ_\\pa\n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "       ⎛                 2                               2   ⎞                \n",
       "     2⋅⎝- κ_\\parallel⋅sin (θ) + κ_\\parallel + κ_\\perp⋅sin (θ)⎠                \n",
       "\n",
       "______________________________________________________________________________\n",
       "                  4                       2        2    4                 2   \n",
       "rallel⋅κ_\\perp⋅sin (θ) - 2⋅\\kappa_{\\times} ⋅κ_\\perp ⋅sin (θ) + κ_\\parallel ⋅κ_\n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "___________________________________________________________________           \n",
       "     2    4                           3    4             4    4               \n",
       "\\perp ⋅sin (θ) - 2⋅κ_\\parallel⋅κ_\\perp ⋅sin (θ) + κ_\\perp ⋅sin (θ)   \\kappa_{\\\n",
       "───────────────────────────────────────────────────────────────────, ─────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "                                                                              \n",
       "      2    2                             2                                    \n",
       "times} ⋅sin (θ) + κ_\\parallel⋅κ_\\perp⋅sin (θ) - 2⋅κ_\\parallel⋅κ_\\perp - κ_\\per\n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "                ______________________________________________________________\n",
       " 2    2        ╱                4    4                       2            2   \n",
       "p ⋅sin (θ) + ╲╱  \\kappa_{\\times} ⋅sin (θ) - 4⋅\\kappa_{\\times} ⋅κ_\\parallel ⋅si\n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                           ⎛  \n",
       "                                                                         2⋅⎝κ_\n",
       "\n",
       "______________________________________________________________________________\n",
       " 2                       2            2                    2                  \n",
       "n (θ) + 4⋅\\kappa_{\\times} ⋅κ_\\parallel  + 2⋅\\kappa_{\\times} ⋅κ_\\parallel⋅κ_\\pe\n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "             2                               2   ⎞                            \n",
       "\\parallel⋅sin (θ) - κ_\\parallel - κ_\\perp⋅sin (θ)⎠                            \n",
       "\n",
       "______________________________________________________________________________\n",
       "      4                       2        2    4                 2        2    4 \n",
       "rp⋅sin (θ) - 2⋅\\kappa_{\\times} ⋅κ_\\perp ⋅sin (θ) + κ_\\parallel ⋅κ_\\perp ⋅sin (\n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "_______________________________________________________⎤\n",
       "                          3    4             4    4    ⎥\n",
       "θ) - 2⋅κ_\\parallel⋅κ_\\perp ⋅sin (θ) + κ_\\perp ⋅sin (θ) ⎥\n",
       "───────────────────────────────────────────────────────⎥\n",
       "                                                       ⎥\n",
       "                                                       ⎦"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "EM.solve_N2(wave_eq)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### R,L / X,O Waves\n",
    "\n",
    "For specific $\\theta$, you can observe the characteristic R,L / X,O waves. The `sinupy.waves.EM.solve_N2` function supports solving $N^2(\\omega, \\theta=const.)$ with given $\\theta$ and it would be faster than unknown $\\theta$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAANIAAAAXCAYAAAB+vBFFAAADYklEQVR4nO3bTYgcRRjG8d9G8eAHBFn0oJAoSPAQmYgQUEwWjQiKRD0JKs5FwYNXQRQyAT1qAvGgoDiCguYSNAiKogmI4kHNURR1PSSgRkSERePHeqgZ7J3t2e2Pmpnu3frDME1VdfXz1jNvVXcNPdfr9SQSiXpsyRwvYDnz+WoWghKJBjNvZY4sDyvOz2l8EidwdhrKEokWsYSDg+Mutg0r8hLpBHqTVpRItJAl/+fGgkwibclp3GS6wnK6MFsZich0tdzXMol0rRDssZHy3TiNH7Arkq5JsRFiiE3bx6QR+ssk0vWD7y8yZQ8Jz1Tf4AZ8GUnXpNgIMcSm7WPSCP1VE+k8HEIfL+M2/BxV2WTYCDHEpu1j0gj9eZsN4xgKXsS72IOH8VJkTZNkI8QQm7aPSSP0l1mROjiHt7BPWC4nKXbR6j37VwZ1H+XU9Qv02VEvhh24vET72CxaHfdan9cK9NnRbl876uuv7WvRFelqbB0c/yRsA+7GXTg+5pwb8Tn+HCm/ShigxXWueThzzSEd7MerOeefWqe/KjGM8hg+xhsF28fmW/xRov2Zderb7msMT4nga9FEGi6fx3AfbsfbeAbv4N+R9nM4Ihh5L/4alG8TZp2jeHydax7OKesKA94X/u8qQ9kYmsitkftru6+N8bTord1Q8OvCMnocn2EnHshpv4w7cA3eFBL2SnyIT/FEdcmVKRvDZqDtvjbG07KJlN1GfGrwfRAX5JzzI24RgjoqDPYpPIh/ygqNQJUY6tAXfnjdyP3GpO2+TtvTsRRNpF34Dd9nyj4QluHteHTMeWeEJfceXIz78XcFnTGoGkNVhmM7q3iL0HZfp+3pWIok0hW4TJh1lkfqnsx8X5Jz7rwwM78n3E+/UPCasakTQ1V24nfhXr2JtN3XWXg6liKbDaeFh8w8Plmj7lK8Pzh/vxD4SbyIR6wOvgh9xba5R6kaQ1W24jo8i18j9x2Ltvs6bU/XJG8WOaD++0hzwkz8C+4Wtkq/E+6t78TTNfpuAzcLM/VzsxYSmc3ua/Z9pL3ZirnMG7LbrXwwPovna1x0nzAzLI2U7xgI+bpG39PiJuGPviEXCQlyLlM2P1VFs2cz+3qh1dv7PVYmUiKRqEjb3kdKJBpJSqREIgIpkRKJCPwHhQlUBjN+wxQAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle \\left[ \\kappa_{\\times} + \\kappa_{\\perp}, \\  - \\kappa_{\\times} + \\kappa_{\\perp}\\right]$"
      ],
      "text/plain": [
       "[\\kappa_{\\times} + κ_\\perp, -\\kappa_{\\times} + κ_\\perp]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAL4AAAAdCAYAAAAU/NbdAAAEV0lEQVR4nO3c2YscVRTA4W+M24OREEUjblEQDRiZmICQaHALiihx9MUVR4wPBvwDxIWJxEc1QRSViC0oqARDHMQtLpHEKIrGNyWoo5ho1OCG4hIdH0436fRUprt6qqt6uusHRXXfKuqec+6pe++593QPjIyMKCnpNw5KKLsXm1HB6lyl6U3uwAf4FT9gFGcWKlF/sUL48itYXytMcvyT8BuGcVcOgvU65+MRLMaF2ItNmF2gTP3EOuHL7+GMWuHBRUnTR1zS8P1G/IIlovcvKYCkHr+ks8wUdv+pyX3H4l881HGJ+pDS8fNnLbZjW5P7lov2eaHTAvUjpePnywM4F1eL3nwyhrAH73RaqCkwjHERx0wr0jj+PKHkhobyc7ATX2FBRnJ1M+3a4UFcKwLcL5rUcWT1vlH7vyC91gaF6ZPG8c+unj+qK7tJLH3uwCJ8nJFc3Uw7dlhrn9N/2kIdl+NQEx2i19qgMH3adfwZoger4AksE2vU/UBaOzyMm3GdCGjnVI8jJqljCL/jtSnW3e0Upk+a5cyakGNiM2ApbhXrpP1EWjusrJ7faChfhZGE+w/HpXgZf06x7m6nMH3S9PiD+BsbcbEYgpoJeBy2Vj9vrX7PkzExh2z1eLqFZw5KZ4eBAxwjB7h/mRgNGqc57dSdJWMm2uvJ6rW3Eq5VWnjmoIL0abXHPxWzqp+/xx8iALnC5Jswh2Fh9fPC6vc8+dzEXnMydjW53q4d0nCVcIaXOlD36fgZu9uQa01d/TUGxbLrU+LFqGd7k+cVqk+rjl8bkjbgGrEb+SLuEw30X9qKc+KijJ/XaTvMEA3/ptjdzbru27EFz7Yh25qEsmHh+BW8nfJ5herT6lSnJuQzojcaxfuYjxvSVjqN6bQdluIoydOcXmuDQvVJ6/j1S0u1BLZVYuktCypifjic0fOyph07LJY8xTsFcxvKhkRPtzGjuruZQvVp1fEXiKH3y7qyTWJ4m4vbMpZnb0bPy5q0dhgQuTbrcUhd+ckiIFzZcO+VIpUhac6aVxvkRaH6tOL4x+MYEayMN1y7s+48MwN55ouU6MbArhtoxw7juAyn4TkRU50g5vDbRK5+jUU4UXJuTp5tkAeF69NKcLtT9EZJvDvJtbTMwlm4X/PMxSJo1w67xY7tZjwvfoSyXaQn16cjDFXPSfP7vNogLRWtLVs2Urg+3ZSPfx7+EYlcvcYusXLxIb7F9SZO54bwif2H/pIO0U3ZmaNi1/K7ogXpAEeLnvFV8XI/aqLt54l18ZIc6CbH71Vm43UxvC/HBWJ/4TGdH9KX4Me64xY83lA2nchMn26a6vQiAyJQ3yNWbP4SKcm1Of9q+4K5TrBVjDa9Qmb6lI7fWcZxtwjY6lMndoiev3FFoyQnkhz/a7G5UsE3yn9amCqbDlD+Wa5S9C8rxK/e5qj7LUSS49+TYaVjImBVdy4pyZN1EjI+y+C2pC8pHb+kLykdv6Qv+R/L9FDFqrotywAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\left[ \\kappa_{\\parallel}, \\  - \\frac{\\kappa_{\\times}^{2}}{\\kappa_{\\perp}} + \\kappa_{\\perp}\\right]$"
      ],
      "text/plain": [
       "⎡                              2          ⎤\n",
       "⎢               \\kappa_{\\times}           ⎥\n",
       "⎢κ_\\parallel, - ──────────────── + κ_\\perp⎥\n",
       "⎣                   κ_\\perp               ⎦"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sympy import pi\n",
    "# Wave propagate along the magnetic field, thus comes  L / R waves.\n",
    "EM.solve_N2(wave_eq, theta=0)\n",
    "# Wave propagate perpendicular to the magnetic field, thus comes O / X waves.\n",
    "EM.solve_N2(wave_eq, theta=pi/2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### $\\kappa_\\parallel$, $\\kappa_{\\perp}$ ...  can be transform to $\\omega_{ce}$ ...\n",
    "\n",
    "I guess nobody would like to deduce the following formula by hand. And most papers in the field of plasma physics choose to give $N^2(\\omega, \\theta=const.)$ with a known $\\theta$, *e.g.* when $\\theta=0, \\pi/2$, instead of the following complicated and complete expression. (sufficient patience required if deduced by hand)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sinupy.mediums.plasma as pms\n",
    "N2_in_omega_theta = [\n",
    "    pms.kappa2omega(sol, wave, plasma) for sol in \n",
    "    EM.solve_N2(wave_eq)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/latex": [
       "$\\displaystyle \\left[ \\frac{- \\frac{\\omega_{ce}^{2} \\omega_{pe}^{4} \\sin^{2}{\\left(\\theta \\right)}}{\\omega_{}^{2} \\left(- \\omega_{ce}^{2} + \\omega_{}^{2}\\right)^{2}} - \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right) \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right) \\sin^{2}{\\left(\\theta \\right)} + 2 \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right) \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right) + \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right)^{2} \\sin^{2}{\\left(\\theta \\right)} + \\sqrt{\\frac{\\omega_{ce}^{4} \\omega_{pe}^{8} \\sin^{4}{\\left(\\theta \\right)}}{\\omega_{}^{4} \\left(- \\omega_{ce}^{2} + \\omega_{}^{2}\\right)^{4}} - \\frac{4 \\omega_{ce}^{2} \\omega_{pe}^{4} \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right)^{2} \\sin^{2}{\\left(\\theta \\right)}}{\\omega_{}^{2} \\left(- \\omega_{ce}^{2} + \\omega_{}^{2}\\right)^{2}} + \\frac{4 \\omega_{ce}^{2} \\omega_{pe}^{4} \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right)^{2}}{\\omega_{}^{2} \\left(- \\omega_{ce}^{2} + \\omega_{}^{2}\\right)^{2}} + \\frac{2 \\omega_{ce}^{2} \\omega_{pe}^{4} \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right) \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right) \\sin^{4}{\\left(\\theta \\right)}}{\\omega_{}^{2} \\left(- \\omega_{ce}^{2} + \\omega_{}^{2}\\right)^{2}} - \\frac{2 \\omega_{ce}^{2} \\omega_{pe}^{4} \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right)^{2} \\sin^{4}{\\left(\\theta \\right)}}{\\omega_{}^{2} \\left(- \\omega_{ce}^{2} + \\omega_{}^{2}\\right)^{2}} + \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right)^{2} \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right)^{2} \\sin^{4}{\\left(\\theta \\right)} - 2 \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right) \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right)^{3} \\sin^{4}{\\left(\\theta \\right)} + \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right)^{4} \\sin^{4}{\\left(\\theta \\right)}}}{2 \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} - \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right) \\sin^{2}{\\left(\\theta \\right)} + \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right) \\sin^{2}{\\left(\\theta \\right)} + 1\\right)}, \\  \\frac{\\frac{\\omega_{ce}^{2} \\omega_{pe}^{4} \\sin^{2}{\\left(\\theta \\right)}}{\\omega_{}^{2} \\left(- \\omega_{ce}^{2} + \\omega_{}^{2}\\right)^{2}} + \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right) \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right) \\sin^{2}{\\left(\\theta \\right)} - 2 \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right) \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right) - \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right)^{2} \\sin^{2}{\\left(\\theta \\right)} + \\sqrt{\\frac{\\omega_{ce}^{4} \\omega_{pe}^{8} \\sin^{4}{\\left(\\theta \\right)}}{\\omega_{}^{4} \\left(- \\omega_{ce}^{2} + \\omega_{}^{2}\\right)^{4}} - \\frac{4 \\omega_{ce}^{2} \\omega_{pe}^{4} \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right)^{2} \\sin^{2}{\\left(\\theta \\right)}}{\\omega_{}^{2} \\left(- \\omega_{ce}^{2} + \\omega_{}^{2}\\right)^{2}} + \\frac{4 \\omega_{ce}^{2} \\omega_{pe}^{4} \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right)^{2}}{\\omega_{}^{2} \\left(- \\omega_{ce}^{2} + \\omega_{}^{2}\\right)^{2}} + \\frac{2 \\omega_{ce}^{2} \\omega_{pe}^{4} \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right) \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right) \\sin^{4}{\\left(\\theta \\right)}}{\\omega_{}^{2} \\left(- \\omega_{ce}^{2} + \\omega_{}^{2}\\right)^{2}} - \\frac{2 \\omega_{ce}^{2} \\omega_{pe}^{4} \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right)^{2} \\sin^{4}{\\left(\\theta \\right)}}{\\omega_{}^{2} \\left(- \\omega_{ce}^{2} + \\omega_{}^{2}\\right)^{2}} + \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right)^{2} \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right)^{2} \\sin^{4}{\\left(\\theta \\right)} - 2 \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right) \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right)^{3} \\sin^{4}{\\left(\\theta \\right)} + \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right)^{4} \\sin^{4}{\\left(\\theta \\right)}}}{2 \\left(\\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + \\left(- \\frac{\\omega_{pe}^{2}}{\\omega_{}^{2}} + 1\\right) \\sin^{2}{\\left(\\theta \\right)} - \\left(- \\frac{\\omega_{pe}^{2}}{- \\omega_{ce}^{2} + \\omega_{}^{2}} + 1\\right) \\sin^{2}{\\left(\\theta \\right)} - 1\\right)}\\right]$"
      ],
      "text/plain": [
       "⎡                                                                             \n",
       "⎢                                                                             \n",
       "⎢                                                                             \n",
       "⎢                                                                             \n",
       "⎢                                                                             \n",
       "⎢           2         4    2      ⎛          2    ⎞ ⎛              2        ⎞ \n",
       "⎢  \\omega_ce ⋅\\omegaₚₑ ⋅sin (θ)   ⎜  \\omegaₚₑ     ⎟ ⎜      \\omegaₚₑ         ⎟ \n",
       "⎢- ──────────────────────────── - ⎜- ───────── + 1⎟⋅⎜- ───────────────── + 1⎟⋅\n",
       "⎢                          2      ⎜       2       ⎟ ⎜             2    2    ⎟ \n",
       "⎢     2 ⎛           2    2⎞       ⎝      ω        ⎠ ⎝  - \\omega_ce  + ω     ⎠ \n",
       "⎢    ω ⋅⎝- \\omega_ce  + ω ⎠                                                   \n",
       "⎢─────────────────────────────────────────────────────────────────────────────\n",
       "⎢                                                                             \n",
       "⎢                                                                             \n",
       "⎢                                                                             \n",
       "⎢                                                                             \n",
       "⎣                                                                             \n",
       "\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "            ⎛          2    ⎞ ⎛              2        ⎞   ⎛              2    \n",
       "   2        ⎜  \\omegaₚₑ     ⎟ ⎜      \\omegaₚₑ         ⎟   ⎜      \\omegaₚₑ     \n",
       "sin (θ) + 2⋅⎜- ───────── + 1⎟⋅⎜- ───────────────── + 1⎟ + ⎜- ─────────────────\n",
       "            ⎜       2       ⎟ ⎜             2    2    ⎟   ⎜             2    2\n",
       "            ⎝      ω        ⎠ ⎝  - \\omega_ce  + ω     ⎠   ⎝  - \\omega_ce  + ω \n",
       "                                                                              \n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "                            __________________________________________________\n",
       "                           ╱                                                  \n",
       "                          ╱                                                   \n",
       "                         ╱                                             2      \n",
       "     2                  ╱                                   4⋅\\omega_ce ⋅\\omeg\n",
       "    ⎞                  ╱              4         8    4                        \n",
       "    ⎟     2           ╱      \\omega_ce ⋅\\omegaₚₑ ⋅sin (θ)                     \n",
       " + 1⎟ ⋅sin (θ) +     ╱       ──────────────────────────── - ──────────────────\n",
       "    ⎟               ╱                                4                        \n",
       "    ⎠              ╱            4 ⎛           2    2⎞                     2 ⎛ \n",
       "                 ╲╱            ω ⋅⎝- \\omega_ce  + ω ⎠                    ω ⋅⎝-\n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "______________________________________________________________________________\n",
       "                      2                                                   2   \n",
       "     ⎛          2    ⎞                                   ⎛          2    ⎞    \n",
       "   4 ⎜  \\omegaₚₑ     ⎟     2                 2         4 ⎜  \\omegaₚₑ     ⎟    \n",
       "aₚₑ ⋅⎜- ───────── + 1⎟ ⋅sin (θ)   4⋅\\omega_ce ⋅\\omegaₚₑ ⋅⎜- ───────── + 1⎟    \n",
       "     ⎜       2       ⎟                                   ⎜       2       ⎟    \n",
       "     ⎝      ω        ⎠                                   ⎝      ω        ⎠    \n",
       "─────────────────────────────── + ───────────────────────────────────────── + \n",
       "                 2                                               2            \n",
       "          2    2⎞                           2 ⎛           2    2⎞             \n",
       " \\omega_ce  + ω ⎠                          ω ⋅⎝- \\omega_ce  + ω ⎠             \n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                         ⎛          2   ⎛          2    ⎞           ⎛         \n",
       "                         ⎜  \\omegaₚₑ    ⎜  \\omegaₚₑ     ⎟    2      ⎜      \\om\n",
       "                       2⋅⎜- ───────── - ⎜- ───────── + 1⎟⋅sin (θ) + ⎜- ───────\n",
       "                         ⎜       2      ⎜       2       ⎟           ⎜         \n",
       "                         ⎝      ω       ⎝      ω        ⎠           ⎝  - \\omeg\n",
       "\n",
       "______________________________________________________________________________\n",
       "                                                                              \n",
       "                       ⎛          2    ⎞ ⎛              2        ⎞            \n",
       "           2         4 ⎜  \\omegaₚₑ     ⎟ ⎜      \\omegaₚₑ         ⎟    4       \n",
       "2⋅\\omega_ce ⋅\\omegaₚₑ ⋅⎜- ───────── + 1⎟⋅⎜- ───────────────── + 1⎟⋅sin (θ)   2\n",
       "                       ⎜       2       ⎟ ⎜             2    2    ⎟            \n",
       "                       ⎝      ω        ⎠ ⎝  - \\omega_ce  + ω     ⎠            \n",
       "────────────────────────────────────────────────────────────────────────── - ─\n",
       "                                               2                              \n",
       "                          2 ⎛           2    2⎞                               \n",
       "                         ω ⋅⎝- \\omega_ce  + ω ⎠                               \n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "     2        ⎞            ⎞                                                  \n",
       "egaₚₑ         ⎟    2       ⎟                                                  \n",
       "────────── + 1⎟⋅sin (θ) + 1⎟                                                  \n",
       "    2    2    ⎟            ⎟                                                  \n",
       "a_ce  + ω     ⎠            ⎠                                                  \n",
       "\n",
       "______________________________________________________________________________\n",
       "                                               2                              \n",
       "                      ⎛              2        ⎞                               \n",
       "          2         4 ⎜      \\omegaₚₑ         ⎟     4                         \n",
       "⋅\\omega_ce ⋅\\omegaₚₑ ⋅⎜- ───────────────── + 1⎟ ⋅sin (θ)                    2 \n",
       "                      ⎜             2    2    ⎟            ⎛          2    ⎞  \n",
       "                      ⎝  - \\omega_ce  + ω     ⎠            ⎜  \\omegaₚₑ     ⎟  \n",
       "──────────────────────────────────────────────────────── + ⎜- ───────── + 1⎟ ⋅\n",
       "                                      2                    ⎜       2       ⎟  \n",
       "                 2 ⎛           2    2⎞                     ⎝      ω        ⎠  \n",
       "                ω ⋅⎝- \\omega_ce  + ω ⎠                                        \n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "______________________________________________________________________________\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                         2                                                    \n",
       "⎛              2        ⎞              ⎛          2    ⎞ ⎛              2     \n",
       "⎜      \\omegaₚₑ         ⎟     4        ⎜  \\omegaₚₑ     ⎟ ⎜      \\omegaₚₑ      \n",
       "⎜- ───────────────── + 1⎟ ⋅sin (θ) - 2⋅⎜- ───────── + 1⎟⋅⎜- ───────────────── \n",
       "⎜             2    2    ⎟              ⎜       2       ⎟ ⎜             2    2 \n",
       "⎝  - \\omega_ce  + ω     ⎠              ⎝      ω        ⎠ ⎝  - \\omega_ce  + ω  \n",
       "                                                                              \n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "___________________________________________________                           \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "    3                                    4                                    \n",
       "   ⎞            ⎛              2        ⎞                     2         4    2\n",
       "   ⎟     4      ⎜      \\omegaₚₑ         ⎟     4      \\omega_ce ⋅\\omegaₚₑ ⋅sin \n",
       "+ 1⎟ ⋅sin (θ) + ⎜- ───────────────── + 1⎟ ⋅sin (θ)   ─────────────────────────\n",
       "   ⎟            ⎜             2    2    ⎟                                    2\n",
       "   ⎠            ⎝  - \\omega_ce  + ω     ⎠               2 ⎛           2    2⎞ \n",
       "                                                       ω ⋅⎝- \\omega_ce  + ω ⎠ \n",
       "───────────────────────────────────────────────────, ─────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "      ⎛          2    ⎞ ⎛              2        ⎞             ⎛          2    \n",
       "(θ)   ⎜  \\omegaₚₑ     ⎟ ⎜      \\omegaₚₑ         ⎟    2        ⎜  \\omegaₚₑ     \n",
       "─── + ⎜- ───────── + 1⎟⋅⎜- ───────────────── + 1⎟⋅sin (θ) - 2⋅⎜- ───────── + 1\n",
       "      ⎜       2       ⎟ ⎜             2    2    ⎟             ⎜       2       \n",
       "      ⎝      ω        ⎠ ⎝  - \\omega_ce  + ω     ⎠             ⎝      ω        \n",
       "                                                                              \n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "                                                                              \n",
       "                                                                             ╱\n",
       "                                                                            ╱ \n",
       "                                                                           ╱  \n",
       "                                                       2                  ╱   \n",
       "⎞ ⎛              2        ⎞   ⎛              2        ⎞                  ╱    \n",
       "⎟ ⎜      \\omegaₚₑ         ⎟   ⎜      \\omegaₚₑ         ⎟     2           ╱     \n",
       "⎟⋅⎜- ───────────────── + 1⎟ - ⎜- ───────────────── + 1⎟ ⋅sin (θ) +     ╱      \n",
       "⎟ ⎜             2    2    ⎟   ⎜             2    2    ⎟               ╱       \n",
       "⎠ ⎝  - \\omega_ce  + ω     ⎠   ⎝  - \\omega_ce  + ω     ⎠              ╱        \n",
       "                                                                   ╲╱         \n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "______________________________________________________________________________\n",
       "                                                                        2     \n",
       "                                                       ⎛          2    ⎞      \n",
       "                                           2         4 ⎜  \\omegaₚₑ     ⎟     2\n",
       "                                4⋅\\omega_ce ⋅\\omegaₚₑ ⋅⎜- ───────── + 1⎟ ⋅sin \n",
       "          4         8    4                             ⎜       2       ⎟      \n",
       " \\omega_ce ⋅\\omegaₚₑ ⋅sin (θ)                          ⎝      ω        ⎠      \n",
       " ──────────────────────────── - ──────────────────────────────────────────────\n",
       "                         4                                         2          \n",
       "    4 ⎛           2    2⎞                     2 ⎛           2    2⎞           \n",
       "   ω ⋅⎝- \\omega_ce  + ω ⎠                    ω ⋅⎝- \\omega_ce  + ω ⎠           \n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                             ⎛\n",
       "                                                                             ⎜\n",
       "                                                                           2⋅⎜\n",
       "                                                                             ⎜\n",
       "                                                                             ⎝\n",
       "\n",
       "______________________________________________________________________________\n",
       "                                              2                               \n",
       "                             ⎛          2    ⎞                           ⎛    \n",
       "                 2         4 ⎜  \\omegaₚₑ     ⎟               2         4 ⎜  \\o\n",
       "(θ)   4⋅\\omega_ce ⋅\\omegaₚₑ ⋅⎜- ───────── + 1⎟    2⋅\\omega_ce ⋅\\omegaₚₑ ⋅⎜- ──\n",
       "                             ⎜       2       ⎟                           ⎜    \n",
       "                             ⎝      ω        ⎠                           ⎝    \n",
       "─── + ───────────────────────────────────────── + ────────────────────────────\n",
       "                                     2                                        \n",
       "                2 ⎛           2    2⎞                                       2 \n",
       "               ω ⋅⎝- \\omega_ce  + ω ⎠                                      ω ⋅\n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "        2   ⎛          2    ⎞           ⎛              2        ⎞            ⎞\n",
       "\\omegaₚₑ    ⎜  \\omegaₚₑ     ⎟    2      ⎜      \\omegaₚₑ         ⎟    2       ⎟\n",
       "───────── + ⎜- ───────── + 1⎟⋅sin (θ) - ⎜- ───────────────── + 1⎟⋅sin (θ) - 1⎟\n",
       "     2      ⎜       2       ⎟           ⎜             2    2    ⎟            ⎟\n",
       "    ω       ⎝      ω        ⎠           ⎝  - \\omega_ce  + ω     ⎠            ⎠\n",
       "\n",
       "______________________________________________________________________________\n",
       "                                                                              \n",
       "      2    ⎞ ⎛              2        ⎞                                  ⎛     \n",
       "megaₚₑ     ⎟ ⎜      \\omegaₚₑ         ⎟    4                 2         4 ⎜     \n",
       "─────── + 1⎟⋅⎜- ───────────────── + 1⎟⋅sin (θ)   2⋅\\omega_ce ⋅\\omegaₚₑ ⋅⎜- ───\n",
       "   2       ⎟ ⎜             2    2    ⎟                                  ⎜     \n",
       "  ω        ⎠ ⎝  - \\omega_ce  + ω     ⎠                                  ⎝  - \\\n",
       "────────────────────────────────────────────── - ─────────────────────────────\n",
       "                   2                                                          \n",
       "⎛           2    2⎞                                                2 ⎛        \n",
       "⎝- \\omega_ce  + ω ⎠                                               ω ⋅⎝- \\omega\n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "______________________________________________________________________________\n",
       "                   2                                                          \n",
       "         2        ⎞                                                           \n",
       " \\omegaₚₑ         ⎟     4                                                     \n",
       "────────────── + 1⎟ ⋅sin (θ)                    2                          2  \n",
       "        2    2    ⎟            ⎛          2    ⎞  ⎛              2        ⎞   \n",
       "omega_ce  + ω     ⎠            ⎜  \\omegaₚₑ     ⎟  ⎜      \\omegaₚₑ         ⎟   \n",
       "──────────────────────────── + ⎜- ───────── + 1⎟ ⋅⎜- ───────────────── + 1⎟ ⋅s\n",
       "          2                    ⎜       2       ⎟  ⎜             2    2    ⎟   \n",
       "   2    2⎞                     ⎝      ω        ⎠  ⎝  - \\omega_ce  + ω     ⎠   \n",
       "_ce  + ω ⎠                                                                    \n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "______________________________________________________________________________\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                      3                       \n",
       "           ⎛          2    ⎞ ⎛              2        ⎞            ⎛           \n",
       "  4        ⎜  \\omegaₚₑ     ⎟ ⎜      \\omegaₚₑ         ⎟     4      ⎜      \\omeg\n",
       "in (θ) - 2⋅⎜- ───────── + 1⎟⋅⎜- ───────────────── + 1⎟ ⋅sin (θ) + ⎜- ─────────\n",
       "           ⎜       2       ⎟ ⎜             2    2    ⎟            ⎜           \n",
       "           ⎝      ω        ⎠ ⎝  - \\omega_ce  + ω     ⎠            ⎝  - \\omega_\n",
       "                                                                              \n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "_______________________⎤\n",
       "                       ⎥\n",
       "                       ⎥\n",
       "                       ⎥\n",
       "             4         ⎥\n",
       "   2        ⎞          ⎥\n",
       "aₚₑ         ⎟     4    ⎥\n",
       "──────── + 1⎟ ⋅sin (θ) ⎥\n",
       "  2    2    ⎟          ⎥\n",
       "ce  + ω     ⎠          ⎥\n",
       "                       ⎥\n",
       "───────────────────────⎥\n",
       "                       ⎥\n",
       "                       ⎥\n",
       "                       ⎥\n",
       "                       ⎥\n",
       "                       ⎦"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N2_in_omega_theta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/latex": [
       "$\\displaystyle \\frac{\\omega_{ce}^{2} \\omega_{pe}^{4} \\sin^{2}{\\left(\\theta \\right)} - \\omega_{}^{2} \\sqrt{\\frac{\\omega_{ce}^{2} \\omega_{pe}^{4} \\left(\\omega_{ce} - \\omega_{}\\right)^{2} \\left(\\omega_{ce} + \\omega_{}\\right)^{2} \\left(\\omega_{ce}^{2} \\omega_{}^{2} \\left(\\cos^{2}{\\left(\\theta \\right)} - 1\\right)^{2} + 4 \\omega_{pe}^{4} \\cos^{2}{\\left(\\theta \\right)} - 8 \\omega_{pe}^{2} \\omega_{}^{2} \\cos^{2}{\\left(\\theta \\right)} + 4 \\omega_{}^{4} \\cos^{2}{\\left(\\theta \\right)}\\right)}{\\omega_{}^{6} \\left(\\omega_{ce}^{2} - \\omega_{}^{2}\\right)^{4}}} \\left(\\omega_{ce}^{2} - \\omega_{}^{2}\\right)^{2} - \\omega_{}^{2} \\left(\\omega_{ce}^{2} + \\omega_{pe}^{2} - \\omega_{}^{2}\\right)^{2} \\sin^{2}{\\left(\\theta \\right)} + \\left(\\omega_{ce}^{2} - \\omega_{}^{2}\\right) \\left(\\omega_{pe}^{2} - \\omega_{}^{2}\\right) \\left(\\cos^{2}{\\left(\\theta \\right)} + 1\\right) \\left(\\omega_{ce}^{2} + \\omega_{pe}^{2} - \\omega_{}^{2}\\right)}{2 \\left(\\omega_{ce}^{2} - \\omega_{}^{2}\\right) \\left(\\omega_{ce}^{2} \\omega_{pe}^{2} \\cos^{2}{\\left(\\theta \\right)} - \\omega_{ce}^{2} \\omega_{}^{2} - \\omega_{pe}^{2} \\omega_{}^{2} + \\omega_{}^{4}\\right)}$"
      ],
      "text/plain": [
       "                                          ____________________________________\n",
       "                                         ╱                                    \n",
       "                                        ╱           2         4               \n",
       "         2         4    2       2      ╱   \\omega_ce ⋅\\omegaₚₑ ⋅(\\omega_ce - ω\n",
       "\\omega_ce ⋅\\omegaₚₑ ⋅sin (θ) - ω ⋅    ╱    ───────────────────────────────────\n",
       "                                     ╱                                        \n",
       "                                    ╱                                         \n",
       "                                  ╲╱                                          \n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "______________________________________________________________________________\n",
       "                    ⎛                           2                             \n",
       " 2                2 ⎜         2  2 ⎛   2       ⎞              4    2          \n",
       ") ⋅(\\omega_ce + ω) ⋅⎝\\omega_ce ⋅ω ⋅⎝cos (θ) - 1⎠  + 4⋅\\omegaₚₑ ⋅cos (θ) - 8⋅\\o\n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                4                             \n",
       "                             6 ⎛         2    2⎞                              \n",
       "                            ω ⋅⎝\\omega_ce  - ω ⎠                              \n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                 ⎛         2    2⎞ ⎛         2\n",
       "                                               2⋅⎝\\omega_ce  - ω ⎠⋅⎝\\omega_ce \n",
       "\n",
       "___________________________________                                           \n",
       "                                 ⎞                                            \n",
       "      2  2    2         4    2   ⎟                   2                        \n",
       "megaₚₑ ⋅ω ⋅cos (θ) + 4⋅ω ⋅cos (θ)⎠  ⎛         2    2⎞     2 ⎛         2       \n",
       "────────────────────────────────── ⋅⎝\\omega_ce  - ω ⎠  - ω ⋅⎝\\omega_ce  + \\ome\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "         2    2               2  2           2  2    4⎞                       \n",
       "⋅\\omegaₚₑ ⋅cos (θ) - \\omega_ce ⋅ω  - \\omegaₚₑ ⋅ω  + ω ⎠                       \n",
       "\n",
       "                                                                              \n",
       "                                                                              \n",
       "           2                                                                  \n",
       "    2    2⎞     2      ⎛         2    2⎞ ⎛        2    2⎞ ⎛   2       ⎞ ⎛     \n",
       "gaₚₑ  - ω ⎠ ⋅sin (θ) + ⎝\\omega_ce  - ω ⎠⋅⎝\\omegaₚₑ  - ω ⎠⋅⎝cos (θ) + 1⎠⋅⎝\\omeg\n",
       "                                                                              \n",
       "                                                                              \n",
       "                                                                              \n",
       "──────────────────────────────────────────────────────────────────────────────\n",
       "                                                                              \n",
       "                                                                              \n",
       "\n",
       "                       \n",
       "                       \n",
       "                       \n",
       "    2           2    2⎞\n",
       "a_ce  + \\omegaₚₑ  - ω ⎠\n",
       "                       \n",
       "                       \n",
       "                       \n",
       "───────────────────────\n",
       "                       \n",
       "                       "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N2_in_omega_theta[0].simplify() # This simplification would cost a minute or more."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
